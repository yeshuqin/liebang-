{"remainingRequest":"/Users/gigi/webspace/liebang/web-admin/node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js!/Users/gigi/webspace/liebang/web-admin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/gigi/webspace/liebang/web-admin/node_modules/_vue-loader@15.9.2@vue-loader/lib/index.js??vue-loader-options!/Users/gigi/webspace/liebang/web-admin/src/components/BaseTable/tlTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/gigi/webspace/liebang/web-admin/src/components/BaseTable/tlTable.vue","mtime":1590806092637},{"path":"/Users/gigi/webspace/liebang/web-admin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gigi/webspace/liebang/web-admin/node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/gigi/webspace/liebang/web-admin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gigi/webspace/liebang/web-admin/node_modules/_vue-loader@15.9.2@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default2 = {\n  name: 'TlTable',\n  props: {\n    table: {\n      type: Object,\n      default: function _default() {\n        return {\n          hasMergeRowOrColumn: false,\n          // 是否合并单元格\n          loading: false,\n          // 加载中动画\n          hasShowSummary: false,\n          // 是否显示表位合计行\n          border: false,\n          // 是否带有纵向边框，默认为false\n          hasSelect: true,\n          // 有无选中功能\n          hasOperation: false,\n          // 有无操作功能\n          hasExpand: false,\n          // 有无展开行功能\n          hasIndex: false,\n          // 有无索引\n          height: '',\n          // 表格高度\n          page: 1,\n          size: 50,\n          total: 0,\n          tr: [// 表头数据 —— className:列的class名\n          {\n            label: 'label',\n            prop: 'prop',\n            className: 'classname',\n            minWidth: '80',\n            showThousands: false,\n            // 分隔符\n            sortable: false,\n            // 表格排序\n            ellipsis: false,\n            // 多行溢出\n            show: true,\n            // show有三种值：false隐藏当前列，true常规表格列，\n            slot: false // template自定义表格列\n\n            /* <template slot-scope=\"props\" slot=\"example\">\n             <a class=\"list-a\" target=\"_blank\" :href=\"'/#/bombscreen?mobile=' + props.obj.row.mobile\">{{ props.obj.row.username }}</a>\n            </template> */\n\n          }],\n          data: [],\n          // 表格数据 —— 如需添加行class，处理数据时则需要传入class名， class需为数组\n          operation: {\n            // 操作功能\n            label: '操作',\n            // 操作列的行首文字\n            width: '200',\n            // 操作列的宽度\n            className: '',\n            // 操作列的class名\n            data: [// 操作列数据\n            {\n              label: '通过',\n              // 按钮文字\n              Fun: 'handleSubmit',\n              // 点击按钮后触发的父组件事件\n              size: 'mini',\n              // 按钮大小\n              classname: 'show' // 按钮的类名\n\n            }],\n            other: []\n          },\n          expands: [// 展开行数据\n          {\n            label: 'label',\n            prop: 'prop'\n          }],\n          getSummaries: function getSummaries(param) {\n            // 自定义表位合计行数据\n            // *** 此函数传入param参数\n            console.log(param); // *** 最后返回一个数组，合计行会显示数组中的内容\n\n            return [];\n          }\n        };\n      }\n    },\n    pageSizes: {\n      type: Array,\n      default: function _default() {\n        return [20, 50, 100, 500];\n      }\n    },\n    showPagination: {\n      type: Boolean,\n      default: true\n    },\n    showTopPage: {\n      type: Boolean,\n      default: false\n    },\n    autoTable: {\n      type: Boolean,\n      default: false\n    },\n    clearSelect: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      maxHeight: 'auto'\n    };\n  },\n  watch: {\n    clearSelect: function clearSelect(old, newVal) {\n      console.log(77777);\n      this.$refs.TlRlTable.clearSelection();\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    this.table.page = this.table.page || 1;\n    this.table.size = this.table.size || 50;\n    this.table.total = this.table.total || 0;\n    this.$nextTick(function () {\n      if (_this.showTopPage) {\n        _this.maxHeight = parseFloat(window.innerHeight) - parseFloat(_this.$refs.tableBox.getBoundingClientRect().top) - 120;\n      } else {\n        _this.maxHeight = parseFloat(window.innerHeight) - parseFloat(_this.$refs.tableBox.getBoundingClientRect().top) - 60;\n      }\n    });\n    this.table.hasOperation = typeof this.table.hasOperation !== 'undefined' ? this.table.hasOperation : true; // 有无操作功能\n\n    this.table.hasExpand = this.table.hasExpand || false; // 有无展开行功能\n\n    this.table.hasSelect = this.table.hasSelect || false; // 有无多选功能\n\n    this.table.hasIndex = this.table.hasIndex || false; // 有无索引\n  },\n  methods: {\n    isDisabled: function isDisabled(row) {\n      if (row.check) {\n        return 0;\n      }\n\n      return 1;\n    },\n    tableThousands: function tableThousands(value) {\n      if (!value || value.toString().length < 4) {\n        return value;\n      }\n\n      var reg = /^[0-9]+.?[0-9]*$/;\n\n      if (!reg.test(value.toString())) {\n        return value;\n      }\n\n      return value.toString().replace(/\\d+/, function (n) {\n        // 先提取整数部分\n        return n.replace(/(\\d)(?=(\\d{3})+$)/g, function ($1) {\n          // 对整数部分添加分隔符\n          return $1 + ',';\n        });\n      });\n    },\n    sizeChange: function sizeChange(val) {\n      this.$emit('sizeChange', val);\n    },\n    pageChange: function pageChange(val) {\n      this.$emit('pageChange', val);\n    },\n    handleSelectionChange: function handleSelectionChange(val) {\n      this.$emit('onHandleSelectionChange', val);\n    },\n    handleSortChange: function handleSortChange(column) {\n      this.$emit('onHandleSortChange', column);\n    },\n    handleOperation: function handleOperation(scope, item) {\n      this.$emit(item.Fun, scope.row, scope.$index);\n    },\n    handleIndexMethod: function handleIndexMethod(index) {\n      var startRow = (this.table.page - 1) * this.table.size + index + 1;\n      return startRow;\n    },\n    handleCommand: function handleCommand(command, unknown, scope) {\n      this.$emit(command, scope.row, scope.$index);\n    },\n    objectSpanMethod: function objectSpanMethod(_ref) {\n      var row = _ref.row,\n          column = _ref.column,\n          rowIndex = _ref.rowIndex,\n          columnIndex = _ref.columnIndex;\n\n      if (this.table.hasMergeRowOrColumn) {\n        this.$emit('onMergeRowOrColumn', {\n          row: row,\n          column: column,\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    },\n    // 点击某一单元格派发事件\n    cellClick: function cellClick(row, column, cell, event) {\n      this.$emit('cellClick', row, column);\n    },\n    cellDblclick: function cellDblclick(row, column) {\n      this.$emit('cellDblclick', row, column);\n    },\n    // 点击某一行时触发的函数\n    // *** 按下左键然后移动鼠标到其它列放开左键，会有报错 -- 优化：添加点击行参数，\n    rowClick: function rowClick(Row, Event, Column) {\n      if (!Column || Column.type === 'selection' || Column.columnKey === 'operation' || Column.type === 'expand') {\n        return;\n      }\n\n      var data1 = {\n        row: Row,\n        event: Event,\n        column: Column\n      };\n      this.$emit('onRowClick', data1);\n    },\n    // 行类名的回调函数\n    // 在表格数据中添加class字段即为表格行类名，配合css可对表格行中的自定义标签进行样式优化\n    rowClassName: function rowClassName(rowdata) {\n      var data = this.table.data;\n      var className = data[rowdata.rowIndex].class ? data[rowdata.rowIndex].class : '';\n\n      if (className.length === 0) {\n        return;\n      }\n\n      className = className.join(' ');\n      return className;\n    }\n  }\n};\nexports.default = _default2;",null]}