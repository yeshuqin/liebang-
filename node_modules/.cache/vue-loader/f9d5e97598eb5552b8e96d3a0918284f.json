{"remainingRequest":"/Users/gigi/webspace/liebang/web-admin/node_modules/_vue-loader@15.9.2@vue-loader/lib/index.js??vue-loader-options!/Users/gigi/webspace/liebang/web-admin/src/components/BaseTable/tlTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/gigi/webspace/liebang/web-admin/src/components/BaseTable/tlTable.vue","mtime":1591287548132},{"path":"/Users/gigi/webspace/liebang/web-admin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gigi/webspace/liebang/web-admin/node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/gigi/webspace/liebang/web-admin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gigi/webspace/liebang/web-admin/node_modules/_vue-loader@15.9.2@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'TlTable',\n  props: {\n    table: {\n      type: Object,\n      default() {\n        return {\n          hasMergeRowOrColumn: false, // 是否合并单元格\n          loading: false, // 加载中动画\n          hasShowSummary: false, // 是否显示表位合计行\n          border: false, // 是否带有纵向边框，默认为false\n          hasSelect: true, // 有无选中功能\n          hasOperation: false, // 有无操作功能\n          hasExpand: false, // 有无展开行功能\n          hasIndex: false, // 有无索引\n          height: '', // 表格高度\n          page: 1,\n          size: 50,\n          total: 0,\n          tr: [ // 表头数据 —— className:列的class名\n            {\n              label: 'label',\n              prop: 'prop',\n              className: 'classname',\n              minWidth: '80',\n              showThousands: false, // 分隔符\n              sortable: false, // 表格排序\n              ellipsis: false, // 多行溢出\n              show: true, // show有三种值：false隐藏当前列，true常规表格列，\n              slot: false // template自定义表格列\n              /* <template slot-scope=\"props\" slot=\"example\">\n               <a class=\"list-a\" target=\"_blank\" :href=\"'/#/bombscreen?mobile=' + props.obj.row.mobile\">{{ props.obj.row.username }}</a>\n              </template> */\n            }\n          ],\n          data: [], // 表格数据 —— 如需添加行class，处理数据时则需要传入class名， class需为数组\n          operation: { // 操作功能\n            label: '操作', // 操作列的行首文字\n            width: '200', // 操作列的宽度\n            className: '', // 操作列的class名\n            data: [ // 操作列数据\n              {\n                label: '通过', // 按钮文字\n                Fun: 'handleSubmit', // 点击按钮后触发的父组件事件\n                size: 'mini', // 按钮大小\n                classname: 'show' // 按钮的类名\n              }\n            ],\n            other: []\n          },\n          expands: [ // 展开行数据\n            {\n              label: 'label',\n              prop: 'prop'\n            }\n          ],\n          getSummaries(param) {\n            // 自定义表位合计行数据\n            // *** 此函数传入param参数\n            console.log(param)\n            // *** 最后返回一个数组，合计行会显示数组中的内容\n            return []\n          }\n        }\n      }\n    },\n    pageSizes: {\n      type: Array,\n      default() {\n        return [20, 50, 100, 500]\n      }\n    },\n    showPagination: {\n      type: Boolean,\n      default: true\n    },\n    showTopPage: {\n      type: Boolean,\n      default: false\n    },\n    autoTable: {\n      type: Boolean,\n      default: false\n    },\n    clearSelect: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      maxHeight: 'auto'\n    }\n  },\n  watch: {\n    clearSelect(old, newVal) {\n      console.log(77777)\n      this.$refs.TlRlTable.clearSelection()\n    }\n  },\n  created() {\n    this.table.page = this.table.page || 1\n    this.table.size = this.table.size || 50\n    this.table.total = this.table.total || 0\n    this.$nextTick(() => {\n      if (this.showTopPage) {\n        this.maxHeight = parseFloat(window.innerHeight) - parseFloat(this.$refs.tableBox.getBoundingClientRect().top) - 120\n      } else {\n        this.maxHeight = parseFloat(window.innerHeight) - parseFloat(this.$refs.tableBox.getBoundingClientRect().top) - 60\n      }\n    })\n    this.table.hasOperation = typeof (this.table.hasOperation) !== 'undefined' ? this.table.hasOperation : true // 有无操作功能\n    this.table.hasExpand = this.table.hasExpand || false // 有无展开行功能\n    this.table.hasSelect = this.table.hasSelect || false // 有无多选功能\n    this.table.hasIndex = this.table.hasIndex || false // 有无索引\n  },\n  methods: {\n    isDisabled(row) {\n      if (row.check) {\n        return 0\n      }\n      return 1\n    },\n    tableThousands(value) {\n      if (!value || value.toString().length < 4) {\n        return value\n      }\n      const reg = /^[0-9]+.?[0-9]*$/\n      if (!reg.test(value.toString())) {\n        return value\n      }\n      return value.toString().replace(/\\d+/, function(n) { // 先提取整数部分\n        return n.replace(/(\\d)(?=(\\d{3})+$)/g, function($1) { // 对整数部分添加分隔符\n          return $1 + ','\n        })\n      })\n    },\n    sizeChange(val) {\n      this.$emit('sizeChange', val)\n    },\n    pageChange(val) {\n      this.$emit('pageChange', val)\n    },\n    handleSelectionChange(val) {\n      this.$emit('onHandleSelectionChange', val)\n    },\n    handleSortChange(column) {\n      this.$emit('onHandleSortChange', column)\n    },\n    handleOperation(scope, item) {\n      this.$emit(item.Fun, scope.row, scope.$index)\n    },\n    handleIndexMethod(index) {\n      const startRow = (this.table.page - 1) * this.table.size + index + 1\n      return startRow\n    },\n    handleCommand(command, unknown, scope) {\n      this.$emit(command, scope.row, scope.$index)\n    },\n    objectSpanMethod({ row, column, rowIndex, columnIndex }) {\n      if (this.table.hasMergeRowOrColumn) {\n        this.$emit('onMergeRowOrColumn', {\n          row,\n          column,\n          rowIndex,\n          columnIndex\n        })\n      }\n    },\n    // 点击某一单元格派发事件\n    cellClick(row, column, cell, event) {\n      this.$emit('cellClick', row, column)\n    },\n    cellDblclick(row, column) {\n      this.$emit('cellDblclick', row, column)\n    },\n    // 点击某一行时触发的函数\n    // *** 按下左键然后移动鼠标到其它列放开左键，会有报错 -- 优化：添加点击行参数，\n    rowClick(Row, Event, Column) {\n      if (\n        !Column ||\n        Column.type === 'selection' ||\n        Column.columnKey === 'operation' ||\n        Column.type === 'expand'\n      ) {\n        return\n      }\n      const data1 = {\n        row: Row,\n        event: Event,\n        column: Column\n      }\n      this.$emit('onRowClick', data1)\n    },\n    // 行类名的回调函数\n    // 在表格数据中添加class字段即为表格行类名，配合css可对表格行中的自定义标签进行样式优化\n    rowClassName(rowdata) {\n      const data = this.table.data\n      let className = data[rowdata.rowIndex].class\n        ? data[rowdata.rowIndex].class\n        : ''\n      if (className.length === 0) {\n        return\n      }\n      className = className.join(' ')\n      return className\n    }\n  }\n}\n",null]}